{"tests.test_tests_base.TestFile.test_platform_isfile_FALSE": [["isfile", false, null]], "tests.test_tests_base.TestFile.test_platform_isdir_FALSE": [["isdir", false, null]], "tests.test_tests_base.TestFile.test_platform_get": [["get", "# This is the main config file for debconf. It tells debconf where to\n# store data. The format of this file is a set of stanzas. Each stanza\n# except the first sets up a database for debconf to use. For details, see\n# debconf.conf(5) (in the debconf-doc package).\n#\n# So first things first. This first stanza gives the names of two databases.\n\n# Debconf will use this database to store the data you enter into it,\n# and some other dynamic data.\nConfig: configdb\n# Debconf will use this database to store static template data.\nTemplates: templatedb\n\n# World-readable, and accepts everything but passwords.\nName: config\nDriver: File\nMode: 644\nReject-Type: password\nFilename: /var/cache/debconf/config.dat\n\n# Not world readable (the default), and accepts only passwords.\nName: passwords\nDriver: File\nMode: 600\nBackup: false\nRequired: false\nAccept-Type: password\nFilename: /var/cache/debconf/passwords.dat\n\n# Set up the configdb database. By default, it consists of a stack of two\n# databases, one to hold passwords and one for everything else.\nName: configdb\nDriver: Stack\nStack: config, passwords\n\n# Set up the templatedb database, which is a single flat text file\n# by default.\nName: templatedb\nDriver: File\nMode: 644\nFilename: /var/cache/debconf/templates.dat\n\n# Well that was pretty straightforward, and it will be enough for most\n# people's needs, but debconf's database drivers can be used to do much\n# more interesting things. For example, suppose you want to use config \n# data from another host, which is mounted over nfs or perhaps the database\n# is accessed via LDAP. You don't want to write to the remote debconf database,\n# just read from it, so you still need a local database for local changes.\n#\n# A remote NFS mounted database, read-only. It is optional; if debconf\n# fails to use it it will not abort.\n#Name: remotedb\n#Driver: DirTree\n#Directory: /mnt/otherhost/var/cache/debconf/config\n#Readonly: true\n#Required: false\n#\n# A remote LDAP database. It is also read-only. The password is really\n# only necessary if the database is not accessible anonymously.\n# Option KeyByKey instructs the backend to retrieve keys from the LDAP\n# server individually (when they are requested), instead of loading all\n# keys at startup. The default is 0, and should only be enabled if you\n# want to track accesses to individual keys on the LDAP server side.\n#Name: remotedb\n#Driver: LDAP\n#Server: remotehost\n#BaseDN: cn=debconf,dc=domain,dc=com\n#BindDN: uid=admin,dc=domain,dc=com\n#BindPasswd: secret\n#KeyByKey: 0\n#\n# A stack consisting of two databases. Values will be read from\n# the first database in the stack to contain a value. In this example,\n# writes always go to the first database.\n#Name: fulldb\n#Driver: Stack\n#Stack: configdb, remotedb\n#\n# In this example, we'd use Config: fulldb at the top of the file\n# to make it use the combination of the databases.\n#\n# Even more complex and interesting setups are possible, see the \n# debconf.conf(5) page for details.\n", null]], "tests.test_tests_base.TestFile.test_platform_isdir": [["isdir", true, null]], "tests.test_tests_base.TestFile.test_platform_exists": [["exists", true, null]], "tests.test_tests_base.TestFile.test_platform_isfile": [["isfile", true, null]]}